language:
  - cpp

sudo: required

branches:
 only:
   - master

compiler:
  - clang

matrix:
  include:
    - os: linux
      dist: xenial
      services:
        - docker
      before_install:
        - docker pull scummvm/buildbot-windows
      env:
        - CROSS_HOST=i686-w64-mingw32
      script:
        - mkdir -m 777 build
        - >-
          docker run -v $(pwd)/build:/buildbot/build -v $(pwd):/buildbot/code scummvm/buildbot-windows
          /bin/bash -c
          "export PATH=/usr/$CROSS_HOST/bin:$PATH;
           cd /buildbot/build &&
           ../code/configure --host=$CROSS_HOST &&
           make -j4 crosswin32dist"
      before_deploy:
        - mkdir artifacts && cp -r build/ResidualVMWin32 artifacts
    - os: linux
      dist: xenial
      addons:
        apt:
          packages:
          - debhelper
          - dpkg-dev
          - fakeroot
          - g++
          - make
          - libsdl2-dev
          - libsdl2-net-dev
          - libcurl4-openssl-dev
          - libjpeg-turbo8-dev
          - libmpeg2-4-dev
          - libogg-dev
          - libvorbis-dev
          - libflac-dev
          - libmad0-dev
          - libpng-dev
          - libglew-dev
          - libtheora-dev
          - libfaad-dev
          - libfluidsynth-dev
          - libfreetype6-dev
          - zlib1g-dev
      script:
        - ln -sf dists/debian .
        - dpkg-buildpackage -b -nc -uc -j4
      before_deploy:
        - mkdir artifacts && cp ../*deb artifacts
    - os: osx
      addons:
        homebrew:
          packages:
            - sdl2
            - sdl2_net
            - libvorbis
            - flac
            - mad
            - theora
            - faad2
            - libmpeg2
            - glew
            - bzip2
            - zlib
            - libiconv
            - freetype
      install:
        - cp -v /usr/local/Cellar/{bzip2,libiconv,zlib}/*/lib/*.a /usr/local/lib
      script:
        - ./configure --enable-all-engines && make -j4
      before_deploy:
        - make osxsnap
        - mkdir artifacts && cp -r ResidualVM-snapshot.dmg artifacts
    - os: linux
      language: android
      android:
        components:
          - tools-25.2.5
          - platform-tools-28.0.2
          - build-tools-28.0.3
          - android-26
      env:
        - ANDROID_TARGET=android-arm64-v8a
        - CROSS_HOST=aarch64-linux-android
        - ANDROID_LEVEL=26
        - ANDROID_SDK=${ANDROID_HOME}
        - ANDROID_NDK=${ANDROID_HOME}/ndk-bundle
        - PATH=${ANDROID_NDK}:${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin:${PATH}
        - CC=${CROSS_HOST}${ANDROID_LEVEL}-clang
        - CXX=${CROSS_HOST}${ANDROID_LEVEL}-clang++
        - AR=${CROSS_HOST}-ar
        - RANLIB=${CROSS_HOST}-ranlib
        - CXXFLAGS=-Wno-inconsistent-missing-override
      before_install:
        - mkdir -p $ANDROID_HOME/licenses
        - echo -e "\n24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_HOME/licenses/android-sdk-license
      install:
        - echo y | sdkmanager ndk-bundle >/dev/null 2>&1
        - ./.travis/build-android-deps.sh
      before_cache:
        - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
        - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
          - $TRAVIS_BUILD_DIR/dependencies
      script:
        - >-
          ./configure
          --enable-all-engines
          --enable-static
          --enable-opengl-shaders
          --with-jpeg-prefix=dependencies
          --with-freetype2-prefix=dependencies
          --host=${ANDROID_TARGET}
          &&
          make -j4 libresidualvm.so
          &&
          TERM=dumb make androidrelease
      before_deploy:
        - mkdir artifacts && cp android/build/outputs/apk/release/ResidualVM-release-unsigned.apk artifacts

deploy:
  provider: script
  script: .travis/deploy.sh
  skip_cleanup: true
  on:
    branch: master
